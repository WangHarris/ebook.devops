{"./":{"url":"./","title":"软件团队基础设施介绍","keywords":"","body":"devops -- 软件团队基础设施介绍 禅道 　　产品，项目和Wiki管理系统。 Sourcetree 　　SourceTree 是 Windows 和Mac OS X 下免费的 Git 和 Hg 客户端管理工具，同时也是Mn版本控制系统工具。支持创建、克隆、提交、push、pull 和合并等操作。 SourceTree拥有一个精美简洁的界面，大大简化了开发者与代码库之间的Git操作方式，这对于那些不熟悉Git命令的开发者来说非常实用。 Gitlab 　　GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。 Jenkins 　　Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。 SonarQube 　　代码质量和安全性监测工具。 Elastic Stack 　　提供日志采集，日志搜索和服务器各项指标监测等功能。 "},"install/":{"url":"install/","title":"安装","keywords":"","body":""},"install/docker.html":{"url":"install/docker.html","title":"docker","keywords":"","body":"ubuntu18.04安装docker 卸载老版本docker sudo apt-get remove docker docker-engine docker.io containerd runc 安装新版本 sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io sudo usermod -aG docker your-user "},"install/docker-compose.html":{"url":"install/docker-compose.html","title":"docker-compose","keywords":"","body":"ubuntu18.04安装docker-compose sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose "},"install/vsftpd.html":{"url":"install/vsftpd.html","title":"vsftpd","keywords":"","body":"vsftpd 安装镜像 docker pull fauria/vsftpd 运行容器 docker run -d --name vsftpd \\ -v /docker/app-data/vsftpd:/home/vsftpd \\ -p 20:20 -p 21:21 \\ -e FTP_USER=xlck-xa-yfzx -e FTP_PASS=Aa1 \\ -e PASV_ADDRESS=127.0.0.1 \\ --restart=always fauria/vsftpd 添加新的ftp用户 docker exec -i -t vsftpd bash mkdir /home/vsftpd/myuser echo -e \"myuser\\nmypass\" >> /etc/vsftpd/virtual_users.txt /usr/bin/db_load -T -t hash -f /etc/vsftpd/virtual_users.txt /etc/vsftpd/virtual_users.db exit docker restart vsftpd "},"install/zbox.html":{"url":"install/zbox.html","title":"zbox","keywords":"","body":"禅道 安装镜像 docker pull idoop/zentao 创建容器 docker run -d -p 8930:80 -p 3306:3306 \\ -e ADMINER_USER=\"admin\" -e ADMINER_PASSWD=\"123456\" \\ -e BIND_ADDRESS=\"false\" \\ -v /docker/app-data/zbox/:/opt/zbox/ \\ --name zbox \\ idoop/zentao:latest "},"install/gitlab.html":{"url":"install/gitlab.html","title":"gitlab","keywords":"","body":"gitlab 下载docker-compose文件 wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml 启动 docker-compose up -d "},"install/nginx.html":{"url":"install/nginx.html","title":"nginx","keywords":"","body":"nginx 安装镜像 docker pull nginx 创建容器 docker run --name nginx -d -p 80:80 nginx 创建本地nginx配置文件夹 sudo mkdir /docker/app-conf/nginx/ 复制容器中的nginx.conf文件到本地配置文件夹中 sudo docker cp nginx:/etc/nginx/nginx.conf /docker/app-conf/nginx/ 停止nginx容器 docker stop nginx 删除容器 docker rm nginx 重新创建容器 docker run --name nginx -d \\ -v /docker/app-data/nginx/html:/usr/share/nginx/html \\ -v /docker/app-conf/nginx/nginx.conf:/etc/nginx/nginx.conf \\ -v /docker/app-log/nginx:/var/log/nginx \\ -p 80:80 nginx 编辑nginx.conf文件 sudo vim /docker/app-conf/nginx/nginx.conf 在http节点中添加以下节点： server { listen 80; server_name gitlab.harris.com; location / { proxy_pass http://172.16.2.35:10080; } } server { listen 80; server_name zbox.harris.com; location / { proxy_pass http://172.16.2.35:8930; } } server { listen 80; server_name office.harris.com; location / { alias /usr/share/nginx/html/office.harris.com/; index index.html; } location /doc { alias /usr/share/nginx/html/_book/; index index.html; autoindex on; } } 重启容器 docker restart nginx "},"use/":{"url":"use/","title":"使用","keywords":"","body":""},"use/hosts.html":{"url":"use/hosts.html","title":"配置hosts","keywords":"","body":"配置hosts 以管理员身份打开记事本 打开C:\\Windows\\System32\\drivers\\etc\\hosts文件 添加以下内容： #########begin######### 172.16.2.35 gitlab.harris.com 172.16.2.35 zbox.harris.com #########end########### "},"use/vsftpd.html":{"url":"use/vsftpd.html","title":"vsftpd","keywords":"","body":"连接ftp 使用sftp协议，端口不填或者填22 "},"use/sourcetree/readme.html":{"url":"use/sourcetree/readme.html","title":"sourcetree","keywords":"","body":"Sourcetree SourceTree 是 Windows 和Mac OS X 下免费的 Git 和 Hg 客户端管理工具，同时也是Mn版本控制系统工具。支持创建、克隆、提交、push、pull 和合并等操作。 SourceTree拥有一个精美简洁的界面，大大简化了开发者与代码库之间的Git操作方式，这对于那些不熟悉Git命令的开发者来说非常实用。 "},"use/sourcetree/install.html":{"url":"use/sourcetree/install.html","title":"安装","keywords":"","body":"安装 安装git 去https://git-scm.com/下载git安装包，默认安装即可。 配置git 打开git bash，输入以下命令，配置自己的用户名和邮箱地址： git config --global user.name \"username\" git config --global user.email \"email\" 输入以下命令产生自己的密钥对： ssh-keygen -t rsa -C \"your email\" 按三次回车键即可。 登录gitlab，上传自己的公钥，参考Gitlab 用户。 安装Sourcetree 去https://www.sourcetreeapp.com/下载安装包。 安装过程中选择Bitbucket，注册Bitbucket账号授权安装。 不要选择mercurial，下载会很慢。 配置Sourcetree "},"use/sourcetree/clone.html":{"url":"use/sourcetree/clone.html","title":"克隆仓库","keywords":"","body":"克隆仓库到本地 登录gitlab复制仓库链接 打开Sourcetree克隆仓库 "},"use/sourcetree/baseoperation.html":{"url":"use/sourcetree/baseoperation.html","title":"基本操作","keywords":"","body":"基本操作 "},"use/sourcetree/gitflow.html":{"url":"use/sourcetree/gitflow.html","title":"gitflow介绍","keywords":"","body":"Gitflow "},"use/sourcetree/gitflowInit.html":{"url":"use/sourcetree/gitflowInit.html","title":"gitflow初始化","keywords":"","body":"Git flow初始化 要使用git flow，必须对克隆下的仓库进行初始化。 点击菜单：仓库 --> git工作流 --> 初始化仓库 "},"use/sourcetree/newfeature.html":{"url":"use/sourcetree/newfeature.html","title":"建立新的功能","keywords":"","body":"建立新的功能 依次点击 仓库 --> git工作流 --> 建立新的功能 "},"use/sourcetree/newfreatureDone.html":{"url":"use/sourcetree/newfreatureDone.html","title":"完成新功能","keywords":"","body":"完成新功能 由于远程develop分支是受保护的分支，除了Maintainer，其他人不能推送自己本地的develop分支到远程develop上，所以，我们不能点击仓库 --> git工作流 --> 完成新功能，而是需要把feature分支推送到远程，申请合并请求，Maintainer审核代码后，合并回develop分支。参考Gitlab 代码审核。 "},"use/sourcetree/newrelease.html":{"url":"use/sourcetree/newrelease.html","title":"建立新的发布版本","keywords":"","body":"建立新的发布版本 这一步由Maintainer进行操作。 依次点击 仓库 --> git工作流 --> 建立新的发布版本。 部署到测试环境测试。 "},"use/sourcetree/releaseBug.html":{"url":"use/sourcetree/releaseBug.html","title":"修复发布版本中的问题","keywords":"","body":"修复发布版本中的问题 在测试环境测试出bug后，从release分支上创建issue分支，进行bug的修复，由于release分支是受保护的分支，所以也需要走合并请求，进行代码审核，最后合并进release分支，重新部署和测试。 创建issue分支 "},"use/sourcetree/newreleaseDone.html":{"url":"use/sourcetree/newreleaseDone.html","title":"完成发布版本","keywords":"","body":"完成发布版本 release分支在测试环境测试通过后，由Maintainer进行 仓库-->Git工作流-->完成发布版本 操作。 "},"use/sourcetree/newhotfix.html":{"url":"use/sourcetree/newhotfix.html","title":"建立新的修复补丁","keywords":"","body":"建立新的修复补丁 当生产环境出现bug时，从master分支上创建hotfix分支，进行代码修复： 仓库 --> Git工作流 --> 建立新的修复补丁 "},"use/sourcetree/hotfixDone.html":{"url":"use/sourcetree/hotfixDone.html","title":"完成修复补丁","keywords":"","body":"完成修复补丁 hotfix分支部署到预生产环境进行测试，没有问题后，申请合并请求，Maintainer审核代码后合并回master和develop分支。或者由Maintainer进行仓库 --> Git工作流 --> 完成修复补丁操作。 "},"use/gitlab/readme.html":{"url":"use/gitlab/readme.html","title":"gitlab","keywords":"","body":"Gitlab GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。 "},"use/gitlab/user.html":{"url":"use/gitlab/user.html","title":"用户","keywords":"","body":"用户 添加用户 用户可以自己注册 管理员可以主动添加用户，用户会收到邮件通知，并重置密码 用户收到邮件： 点击链接，重置密码，即可登录。 用户上传自己的SSH Key 记事本打开C:\\Users\\Harris Wang\\.ssh\\id_rsa.pub文件，内容如下： ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFzwHVHv/8225rhNwSE2iAHUjAQD6YOChBbkOOVRhH3/d/M9YKr5mcvLTwIQ5koaK1s7w8mPeHYSf2ql/goloZxCQj/uOfSK25h2i8oSU1lzGSSzno8yDKsy20WgdOKHdRsfvwY8RjkQ5bt9ZBRRl1PwGz+nU+JOF0WpHtk20lzXZmA8pXlcwK6a+2tRo79Atacfmp4UN/9w9k5rVUKhmOQVYofcY4fK0tAcVDvX4p6inWGlLPkmQmQh3U7zHZy0n4CFbs3ejrTXZFmpzmgGWaxX+hPlbR07chNWfzz2IMtruTxKlzNSf5iGOcnXesL8PV8PPu+6DH9239iseOmT1Z harris-wang@qq.com 复制内容，粘贴到gitlab中： 如果没有.ssh文件夹，或者.ssh文件夹里没有内容，请参考git安装。 "},"use/gitlab/group.html":{"url":"use/gitlab/group.html","title":"项目组","keywords":"","body":"项目组 创建项目组 添加和管理成员 成员角色 owner maintainer developer guest "},"use/gitlab/project.html":{"url":"use/gitlab/project.html","title":"项目","keywords":"","body":"项目 为项目组创建项目 默认拥有项目组的成员，可单独为项目添加成员 "},"use/gitlab/protect.html":{"url":"use/gitlab/protect.html","title":"分支保护","keywords":"","body":"设置公共分支保护 打开项目 设置-->仓库-->保护分支 只允许Maintainers推送和合并代码到公共分支上。 保护标签同上。 "},"use/gitlab/review.html":{"url":"use/gitlab/review.html","title":"代码审核","keywords":"","body":"代码审核介绍 Merge Request 审核 "},"use/jenkins/readme.html":{"url":"use/jenkins/readme.html","title":"jenkins","keywords":"","body":"Jenkins Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。 "},"backup/":{"url":"backup/","title":"数据备份","keywords":"","body":"定期备份以下目录: /docker /var/lib/docker/volumes/gitlab_gitlab-data/_data /var/lib/docker/volumes/gitlab_postgresql-data/_data /var/lib/docker/volumes/gitlab_redis-data/_data "}}